#ifndef SNN_LIBRARY_H
#define SNN_LIBRARY_H

// max spikes to store per synapse
#ifndef MAX_SPIKES
#define MAX_SPIKES 1000 
#endif
// I have to change the way I manage the input
#ifndef INPUT_MAX_SPIKES
#define INPUT_MAX_SPIKES 10000
#endif




/**
 * General structures definition
 */

 

/* Network structs */

/// @brief LIF neuron model structure
typedef struct {

    int *input_synapse_indexes; // indexes of input synapses in the synase array
    int n_input_synapse; // number of input synapses
    int next_input_synapse; // used in initialization
    int *next_spike_index;

    int *output_synapse_indexes; // indexes of output synapses in the synapse array
    int n_output_synapse; // number of output synapses
    int next_output_synapse; // used in initialization

    // is input ot output neuron
    int is_input_neuron; // neuron is an input neuron (in the network)
    int is_output_neuron; // neuron is an output neuron (in the network)

    int excitatory; // neuron behaviour

    double v; // membrane potential
    double r; // neuron resistance
    double v_rest; // neuron resting potential
    double v_tresh; // neuron threshold potential

    int r_time; // refractory time
    int r_time_rest; // resting time in refractory period

    int t_last_spike; // time step when neuron generated last spike


    // array to store spikes generated by the neuron // TODO: probably I will move this to a separated matrix
    int *spike_times_arr; // circular array to store spikes // TODO: this MUST be refactorized
    int last_spike; // indexes of next spike to fire and the last produced // TODO: I really don't understand very good this indexes in this moment
    int max_spikes; // array length

    int highest_post_delay;

} lif_neuron_t;



/// @brief Synapse structure
typedef struct {

    double w; // synapse weight
    int delay; // latency

    int lr;
    void (*learning_rule)(); // pointer to learning rule function

    int t_last_pre_spike, t_last_post_spike; // times of last presynaptic neuron and postsynaptic neurons spikes // if the difference in performance is not critical, this should be removed and neurons directly used

    lif_neuron_t *pre_synaptic_lif_neuron; // reference to presynaptic neuron
    int pre_neuron_index;
    lif_neuron_t *post_synaptic_lif_neuron; // reference to postynaptic neuron
    int post_neuron_index;

} synapse_t;



/// @brief SNN structure 
typedef struct {

    // network general information
    int n_neurons; // number neurons 
    int n_input; // number of input neurons
    int n_output; // number of output neurons
    int neuron_type; // neuron type: LIF (0)

    int n_synapses; // number of synapses
    int n_input_synapses; // number of input synapses
    int n_output_synapses; // number of output synapses

    // array of neurons (an array for each neuron type)
    lif_neuron_t *lif_neurons; 
    //hh_neuron_t *hh_neurons; // TODO

    void (*neuron_initializer)(), (*neuron_re_initializer)(); // function pointers to initialize neurons
    void (*complete_step)(), (*input_step)(), (*output_step)(); // functions pointers to simulate networks

    // array of synapses
    synapse_t *synapses;

    // input arrays
    lif_neuron_t *input_lif_neurons; // only used to introduce data in the network

    //
    int L; // not used actually
    //int *sync;

} spiking_nn_t;



/* Configuration structs */

/// @brief Struct for simulation configuration 
typedef struct{

    // general information
    int simulation_type, neuron_type, simulation_obj, n_process, store, cuda, learn; // simulation type (clock, event), neuron type (LIF...), n_process (number of OpenMP processes), whether network will be stored, whether learning will be carried out

    // file paths to store results and load data from
    char *spike_times_file, *times_file, *n_spikes_file, *final_network_file; // file paths to store results // TODO: I'm not very convinced with this now
    char *network_file, *network_neurons_file, *network_synapses_file; // file paths to load networks

    // simulation
    int time_steps; // time steps of the simulations
    char *input_spikes_file; // file path to load the input spikes from
    int epochs; // number of epochs for the training
    int n_samples; // number of samples to simulate

    // control variables to indicate what parameters have been provided
    int behaviours_provided, delays_provided, weights_provided, training_zones_provided, 
        thresholds_provided, v_rests_provided, refract_times_provided, res_provided; // TODO: add more 

} simulation_configuration_t;


/// @brief Struct for results configuration // I think this structure is not really necessary
typedef struct{

    int n_neurons; // number of neurons
    int n_samples; // number of samples
    int time_steps; // simulation time steps

} results_configuration_t;


/// @brief Struct for initializing the network from input data 
typedef struct{
    
    // connectivity
    int **synaptic_connections, *neuron_excitatory, *training_zones; // change to uint in the future
    int *delay_list;
    double *weight_list;

    // LIF neuron
    double *v_list, *v_thres_list, *v_rest_list, *R_list; // parameters for all neurons [n_neurons]
    int *r_time_list; // refractory times for all neurons [n_neurons] 

} network_construction_lists_t;



/* Results structs */

/// @brief Struct to store the results of a sample 
typedef struct{
    
    double elapsed_time; // total elapsed time in sample simulation
    double elapsed_time_neurons; // elapsed time computing neurons
    double elapsed_time_neurons_input; // elapsed time processing neurons input 
    double elapsed_time_neurons_output; // elapsed time processing neurons output
    double elapsed_time_synapses; // elapsed time processing synapses
    double elapsed_time_synapses_input; // elapsed time processing synapses input
    double elapsed_time_synapses_output; // elapsed time processing synapses output
    double elapsed_time_learning; // elapsed time processing learning rules
    unsigned char **generated_spikes; // generated spikes [n_neurons x n_time_steps]
    int *n_spikes_per_neuron; // number of spikes per each neuron [n_samples x n_neurons]

} simulation_results_per_sample_t;


/// @brief Struct to store results of all samples 
typedef struct{
    
    simulation_results_per_sample_t *results_per_sample; // results for each samples [n_samples]

} simulation_results_t;


// struct to represent a spike train
typedef struct{

    int n_spikes; // number of spikes in the train
    int *stimes; // spike times
    
} spike_train_t;


// spike image (set of spike trains)
typedef struct{

    spike_train_t *st; // pixels

} s_image_t;

// input data
typedef struct{

    int n_samples;
    int type; // image, ...

    // images
    int image_size; // dimensions
    s_image_t *s_images;
    

} input_data_t;



/* Functions related to neurons initialization */

/// @brief Function to initialize the neurons in the networks
/// @param snn SNN structure to initialize neurons
/// @param lists array containing the data to initialize neurons
void initialize_neurons(spiking_nn_t *snn, network_construction_lists_t *data);

// Neurons initilization functions are located in their respective files in neuron_models directory


/* Functions related to synapses initialization */

/// @brief Function to initialize a synapse
/// @param synapse Synapse structure to be initialized
/// @param data Structure containing the data to initialize the synapse with
/// @param snn SNN structure
/// @param synapse_id Neuron index in the synapses array
void initialize_synapse(synapse_t *synapse, network_construction_lists_t *data, spiking_nn_t *snn, int synapse_id);

/// @brief Function to initialize all synapses in the network
/// @param snn SNN structure to initialize synapses in
/// @param n_synapses Number of synapses in the network
/// @param data Structure containing the data to initialize synapses
void initialize_synapses(spiking_nn_t *snn, int n_synapses, network_construction_lists_t *data);

/// @brief Function to reinitialize synapses
/// @param snn SNN structure to reinitialize synapases in
void re_initialize_synapses(spiking_nn_t *snn);

/// @brief Function to reinitialize a synapse
/// @param synapse Synapse to be reinitialized
void re_initialize_synapse(synapse_t *synapse);



/* Functions to connect neurons and synapses */

/// @brief Add input synapse to a neuron
/// @param snn SNN structure
/// @param neuron_index Index of the neuron to add a synapse
/// @param synapse_index Index of the synapse to be added as input to neuron
void add_input_synapse_to_neuron(spiking_nn_t *snn, int neuron_index, int synapse_index);

/// @brief Add output synapse to a neuron
/// @param snn SNN structure
/// @param neuron_index Index of the neuron to add a synapse
/// @param synapse_index Index of the synapse to be added as output to neuron
void add_output_synapse_to_neuron(spiking_nn_t *snn, int neuron_index, int synapse_index);

/// @brief Connect neuron to input and output synapses
/// @param snn SNN structure
/// @param synapse_matrix Synapse matrix 
void connect_neurons_and_synapses(spiking_nn_t *snn, int **synaptic_connections);



/* General function to network initialization */

void initialize_network_function_pointers(spiking_nn_t *snn);

/// @brief Initialize spiking neural network structure
/// @param snn Structure to initialize
/// @param neuron_type Type of neuron of this simulation
/// @param n_neurons Number of neurons
/// @param n_input Number of neurons on the input layer
/// @param n_output Number of neurons on the output layer
/// @param n_synapses Number of synapses
/// @param n_input_synapses Number of network input synapses
/// @param n_output_synapses Nummber of network output synapses
/// @param neuron_behaviour_list List with neuron types (excitatory or inhibitory)
/// @param synapse_matrix Matrix of synaptic connections
/// @param weight_list List of synaptic weights
/// @param delay_list List of synaptic delays
/// @param training_zones List of training types for each synapse
void initialize_network(spiking_nn_t *snn, simulation_configuration_t *conf, network_construction_lists_t *lists);

// function to copy snns
void cp_network(spiking_nn_t *cp_snn, spiking_nn_t *or_snn, simulation_configuration_t *conf);
void cp_neurons(spiking_nn_t *cp_snn, spiking_nn_t *or_snn);
void cp_synapses(spiking_nn_t *cp_snn, spiking_nn_t *or_snn);


/* Other functions */

/// @brief This function reorders the list of synapses and local list of synapse indexes of neurons following the input criterion
/// @param snn Spiking neural network structure to reorder synapses
void reorder_synapse_list(spiking_nn_t *snn);

/// @brief Function to initialize the struct to store the results of the simulation
/// @param results Structure to initialize
/// @param conf Structure with data about the simulation configuration
/// @param snn Spiking neural network structure
void initialize_results_struct(simulation_results_t *results, results_configuration_t *conf);
void initialize_sample_results_struct(simulation_results_per_sample_t *results_per_sample, results_configuration_t *conf);
void free_results_struct_memory(simulation_results_t *results, results_configuration_t *conf);
void free_sample_results_struct_memory(simulation_results_per_sample_t *results_per_sample, results_configuration_t *conf);

/// @brief Function to free the memory of the lists used to initialize the network
/// @param lists Structure of lists to free
/// @param snn Spiking neural network structure
void free_lists_memory(network_construction_lists_t *lists, spiking_nn_t *snn);

/// @brief Initialize weights of the network
/// @param snn Spiking neural network structure
void initialize_network_weights(spiking_nn_t *snn);


/* Functions to print the network information */

/// @brief
/// @param
void print_lif_neuron_information(lif_neuron_t *lif_neuron);

/// @brief
/// @param
void print_lif_neurons_information(spiking_nn_t *snn);

/// @brief
/// @param
void print_neurons_information(spiking_nn_t *snn);

/// @brief
/// @param
void print_input_synapse_information(synapse_t *synapse);

/// @brief
/// @param
void print_synapse_information(synapse_t *synapse);

/// @brief
/// @param
void print_output_synapse_information(synapse_t *synapse);

/// @brief
/// @param
void print_synapses_information(spiking_nn_t *snn);

/// @brief
/// @param
void print_network_information(spiking_nn_t *snn);



void initialize_results_struct(simulation_results_t *results, results_configuration_t *conf);
void initialize_sample_results_struct(simulation_results_per_sample_t *results_per_sample, results_configuration_t *conf);
void reinitialize_results_struct(simulation_results_t *results, results_configuration_t *conf);
void reinitialize_sample_results_struct(simulation_results_per_sample_t *results_per_sample, results_configuration_t *conf);
void free_results_struct_memory(simulation_results_t *results, results_configuration_t *conf);
void free_sample_results_struct_memory(simulation_results_per_sample_t *results_per_sample, results_configuration_t *conf);


void free_snn_struct_memory(spiking_nn_t *snn);
void free_lif_neurons(spiking_nn_t *snn);
void free_synapses(spiking_nn_t *snn);

#endif
